// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that ParkingLotMock does implement ParkingLot.
// If this is not the case, regenerate this file with moq.
var _ ParkingLot = &ParkingLotMock{}

// ParkingLotMock is a mock implementation of ParkingLot.
//
//	func TestSomethingThatUsesParkingLot(t *testing.T) {
//
//		// make and configure a mocked ParkingLot
//		mockedParkingLot := &ParkingLotMock{
//			AddSpotsFunc: func(vehicleType VehicleType, size int)  {
//				panic("mock out the AddSpots method")
//			},
//			ParkFunc: func(vehicleType VehicleType) (int, error) {
//				panic("mock out the Park method")
//			},
//			UnparkFunc: func(spotNumber int) error {
//				panic("mock out the Unpark method")
//			},
//		}
//
//		// use mockedParkingLot in code that requires ParkingLot
//		// and then make assertions.
//
//	}
type ParkingLotMock struct {
	// AddSpotsFunc mocks the AddSpots method.
	AddSpotsFunc func(vehicleType VehicleType, size int)

	// ParkFunc mocks the Park method.
	ParkFunc func(vehicleType VehicleType) (int, error)

	// UnparkFunc mocks the Unpark method.
	UnparkFunc func(spotNumber int) error

	// calls tracks calls to the methods.
	calls struct {
		// AddSpots holds details about calls to the AddSpots method.
		AddSpots []struct {
			// VehicleType is the vehicleType argument value.
			VehicleType VehicleType
			// Size is the size argument value.
			Size int
		}
		// Park holds details about calls to the Park method.
		Park []struct {
			// VehicleType is the vehicleType argument value.
			VehicleType VehicleType
		}
		// Unpark holds details about calls to the Unpark method.
		Unpark []struct {
			// SpotNumber is the spotNumber argument value.
			SpotNumber int
		}
	}
	lockAddSpots sync.RWMutex
	lockPark     sync.RWMutex
	lockUnpark   sync.RWMutex
}

// AddSpots calls AddSpotsFunc.
func (mock *ParkingLotMock) AddSpots(vehicleType VehicleType, size int) {
	if mock.AddSpotsFunc == nil {
		panic("ParkingLotMock.AddSpotsFunc: method is nil but ParkingLot.AddSpots was just called")
	}
	callInfo := struct {
		VehicleType VehicleType
		Size        int
	}{
		VehicleType: vehicleType,
		Size:        size,
	}
	mock.lockAddSpots.Lock()
	mock.calls.AddSpots = append(mock.calls.AddSpots, callInfo)
	mock.lockAddSpots.Unlock()
	mock.AddSpotsFunc(vehicleType, size)
}

// AddSpotsCalls gets all the calls that were made to AddSpots.
// Check the length with:
//
//	len(mockedParkingLot.AddSpotsCalls())
func (mock *ParkingLotMock) AddSpotsCalls() []struct {
	VehicleType VehicleType
	Size        int
} {
	var calls []struct {
		VehicleType VehicleType
		Size        int
	}
	mock.lockAddSpots.RLock()
	calls = mock.calls.AddSpots
	mock.lockAddSpots.RUnlock()
	return calls
}

// Park calls ParkFunc.
func (mock *ParkingLotMock) Park(vehicleType VehicleType) (int, error) {
	if mock.ParkFunc == nil {
		panic("ParkingLotMock.ParkFunc: method is nil but ParkingLot.Park was just called")
	}
	callInfo := struct {
		VehicleType VehicleType
	}{
		VehicleType: vehicleType,
	}
	mock.lockPark.Lock()
	mock.calls.Park = append(mock.calls.Park, callInfo)
	mock.lockPark.Unlock()
	return mock.ParkFunc(vehicleType)
}

// ParkCalls gets all the calls that were made to Park.
// Check the length with:
//
//	len(mockedParkingLot.ParkCalls())
func (mock *ParkingLotMock) ParkCalls() []struct {
	VehicleType VehicleType
} {
	var calls []struct {
		VehicleType VehicleType
	}
	mock.lockPark.RLock()
	calls = mock.calls.Park
	mock.lockPark.RUnlock()
	return calls
}

// Unpark calls UnparkFunc.
func (mock *ParkingLotMock) Unpark(spotNumber int) error {
	if mock.UnparkFunc == nil {
		panic("ParkingLotMock.UnparkFunc: method is nil but ParkingLot.Unpark was just called")
	}
	callInfo := struct {
		SpotNumber int
	}{
		SpotNumber: spotNumber,
	}
	mock.lockUnpark.Lock()
	mock.calls.Unpark = append(mock.calls.Unpark, callInfo)
	mock.lockUnpark.Unlock()
	return mock.UnparkFunc(spotNumber)
}

// UnparkCalls gets all the calls that were made to Unpark.
// Check the length with:
//
//	len(mockedParkingLot.UnparkCalls())
func (mock *ParkingLotMock) UnparkCalls() []struct {
	SpotNumber int
} {
	var calls []struct {
		SpotNumber int
	}
	mock.lockUnpark.RLock()
	calls = mock.calls.Unpark
	mock.lockUnpark.RUnlock()
	return calls
}
